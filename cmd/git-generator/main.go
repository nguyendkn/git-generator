package main

import (
	"context"
	"fmt"
	"os"
	"strings"

	"github.com/nguyendkn/git-generator/internal/ai"
	"github.com/nguyendkn/git-generator/internal/config"
	"github.com/nguyendkn/git-generator/internal/diff"
	"github.com/nguyendkn/git-generator/internal/generator"
	"github.com/nguyendkn/git-generator/internal/git"
	interfaces "github.com/nguyendkn/git-generator/internal/interface"
	"github.com/nguyendkn/git-generator/internal/ui"
	versioning "github.com/nguyendkn/git-generator/internal/version"
	"github.com/nguyendkn/git-generator/pkg/types"
	"github.com/spf13/cobra"
)

var (
	version      = "1.0.0"
	cfgManager   *config.Manager
	appConfig    *types.Config
	interfaceMgr *interfaces.Manager
)

func main() {
	// Show banner when running without subcommands or with generate command
	if len(os.Args) == 1 || (len(os.Args) > 1 && (os.Args[1] == "generate" || os.Args[1] == "gen" || os.Args[1] == "g")) {
		ui.ShowBanner()
		ui.ShowWelcomeMessage()
	}

	// Cleanup interface manager on exit
	defer func() {
		if interfaceMgr != nil {
			interfaceMgr.Close()
		}
	}()

	if err := rootCmd.Execute(); err != nil {
		ui.ShowErrorMessage(fmt.Sprintf("L·ªói: %v", err))
		os.Exit(1)
	}
}

var rootCmd = &cobra.Command{
	Use:   "git-generator",
	Short: "AI-powered Git commit message generator",
	Long: `Git Generator is a CLI tool that uses AI to generate high-quality Git commit messages
based on your staged changes. It analyzes your diff and creates conventional commit messages
that follow best practices.`,
	Version: version,
	PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
		// Skip config loading for certain commands
		if cmd.Name() == "init" || cmd.Name() == "version" || cmd.Name() == "help" {
			return nil
		}

		// Initialize config manager
		cfgManager = config.NewManager()

		var err error
		appConfig, err = cfgManager.LoadOrCreate()
		if err != nil {
			return fmt.Errorf("failed to load configuration: %w", err)
		}

		// Initialize interface manager for generate and interactive commands
		if cmd.Name() == "generate" || cmd.Name() == "interactive" {
			interfaceMgr, err = interfaces.NewManager(appConfig, cfgManager)
			if err != nil {
				return fmt.Errorf("failed to initialize interface manager: %w", err)
			}
		}

		return nil
	},
}

func init() {
	rootCmd.AddCommand(generateCmd)
	rootCmd.AddCommand(interactiveCmd)
	rootCmd.AddCommand(initCmd)
	rootCmd.AddCommand(configCmd)
	rootCmd.AddCommand(statusCmd)
	rootCmd.AddCommand(modeCmd)
	rootCmd.AddCommand(tagCmd)
}

var generateCmd = &cobra.Command{
	Use:   "generate",
	Short: "Generate a commit message for staged changes",
	Long: `Generate an AI-powered commit message based on your staged changes.
The tool analyzes your git diff and creates a conventional commit message.
By default, it will automatically stage all changes (git add .) before generating the commit message.`,
	Aliases: []string{"gen", "g"},
	RunE: func(cmd *cobra.Command, args []string) error {
		// Get flags
		style, _ := cmd.Flags().GetString("style")
		dryRun, _ := cmd.Flags().GetBool("dry-run")
		staged, _ := cmd.Flags().GetBool("staged")
		multiple, _ := cmd.Flags().GetBool("multiple")
		noAdd, _ := cmd.Flags().GetBool("no-add")

		// Auto-stage changes unless --no-add is specified
		if !noAdd && !dryRun {
			gitService := git.NewService(".")
			if !gitService.IsGitRepository() {
				ui.ShowErrorMessage("Kh√¥ng ph·∫£i trong Git repository")
				return fmt.Errorf("not in a Git repository")
			}

			// Check if there are unstaged changes
			hasUnstaged, err := gitService.HasUnstagedChanges()
			if err != nil {
				ui.ShowWarningMessage(fmt.Sprintf("Kh√¥ng th·ªÉ ki·ªÉm tra unstaged changes: %v", err))
			} else if hasUnstaged {
				ui.ShowInfoMessage("üîÑ ƒêang stage t·∫•t c·∫£ thay ƒë·ªïi (git add .)...")
				if err := gitService.AddAll(); err != nil {
					ui.ShowErrorMessage(fmt.Sprintf("L·ªói khi stage changes: %v", err))
					return fmt.Errorf("failed to stage changes: %w", err)
				}
				ui.ShowSuccessMessage("‚úÖ ƒê√£ stage t·∫•t c·∫£ thay ƒë·ªïi")
			}
		}

		// Create generate request
		req := interfaces.GenerateRequest{
			Style:    style,
			DryRun:   dryRun,
			Staged:   staged,
			Multiple: multiple,
			Mode:     interfaces.ModeCLI,
		}

		// Use interface manager
		ctx := context.Background()
		result, err := interfaceMgr.Generate(ctx, req)
		if err != nil {
			return err
		}

		// Display result
		if dryRun {
			ui.ShowInfoMessage("Xem tr∆∞·ªõc (ch·∫ø ƒë·ªô dry-run):")
			fmt.Println(result.Preview)
		} else {
			ui.ShowSuccessMessage("Commit message ƒë√£ ƒë∆∞·ª£c t·∫°o v√† √°p d·ª•ng:")
			// Use formatted message if available, otherwise fall back to String()
			messageText := result.CommitMessage.FormattedMessage
			if messageText == "" {
				messageText = result.CommitMessage.String()
			}
			fmt.Println(messageText)
		}

		return nil
	},
}

var interactiveCmd = &cobra.Command{
	Use:   "interactive",
	Short: "Ch·∫ø ƒë·ªô t∆∞∆°ng t√°c ƒë·ªÉ c·∫•u h√¨nh v√† t·∫°o commit message",
	Long: `Ch·∫°y git-generator trong ch·∫ø ƒë·ªô t∆∞∆°ng t√°c v·ªõi giao di·ªán terminal th√¢n thi·ªán.
B·∫°n c√≥ th·ªÉ ch·ªçn c√°c t√πy ch·ªçn th√¥ng qua menu thay v√¨ d√≤ng l·ªánh.
T·ª± ƒë·ªông stage t·∫•t c·∫£ thay ƒë·ªïi tr∆∞·ªõc khi t·∫°o commit message.`,
	Aliases: []string{"i", "int"},
	RunE: func(cmd *cobra.Command, args []string) error {
		// Auto-stage changes in interactive mode
		gitService := git.NewService(".")
		if !gitService.IsGitRepository() {
			ui.ShowErrorMessage("Kh√¥ng ph·∫£i trong Git repository")
			return fmt.Errorf("not in a Git repository")
		}

		// Check if there are unstaged changes
		hasUnstaged, err := gitService.HasUnstagedChanges()
		if err != nil {
			ui.ShowWarningMessage(fmt.Sprintf("Kh√¥ng th·ªÉ ki·ªÉm tra unstaged changes: %v", err))
		} else if hasUnstaged {
			ui.ShowInfoMessage("üîÑ ƒêang stage t·∫•t c·∫£ thay ƒë·ªïi (git add .)...")
			if err := gitService.AddAll(); err != nil {
				ui.ShowErrorMessage(fmt.Sprintf("L·ªói khi stage changes: %v", err))
				return fmt.Errorf("failed to stage changes: %w", err)
			}
			ui.ShowSuccessMessage("‚úÖ ƒê√£ stage t·∫•t c·∫£ thay ƒë·ªïi")
		}

		// Create generate request for interactive mode
		req := interfaces.GenerateRequest{
			Staged: true, // Default to staged changes in interactive mode
			Mode:   interfaces.ModeInteractive,
		}

		// Use interface manager
		ctx := context.Background()
		result, err := interfaceMgr.Generate(ctx, req)
		if err != nil {
			ui.ShowErrorMessage(fmt.Sprintf("L·ªói trong ch·∫ø ƒë·ªô t∆∞∆°ng t√°c: %v", err))
			return err
		}

		// Display result
		ui.PrintHeader("K·∫øt qu·∫£")
		if req.DryRun {
			ui.ShowInfoMessage("Xem tr∆∞·ªõc (ch·∫ø ƒë·ªô dry-run):")
			fmt.Println(result.Preview)
		} else {
			ui.ShowSuccessMessage("Commit message ƒë√£ ƒë∆∞·ª£c t·∫°o v√† √°p d·ª•ng:")
			fmt.Println(result.CommitMessage.String())
		}

		return nil
	},
}

func init() {
	generateCmd.Flags().StringP("style", "s", "conventional", "Commit message style (conventional, simple, detailed)")
	generateCmd.Flags().BoolP("dry-run", "d", false, "Preview the commit message without applying it")
	generateCmd.Flags().BoolP("staged", "S", true, "Use staged changes (default: true)")
	generateCmd.Flags().BoolP("multiple", "m", false, "Generate multiple commit message options")
	generateCmd.Flags().Bool("no-add", false, "Skip automatic staging of changes (git add .)")
}

var initCmd = &cobra.Command{
	Use:   "init",
	Short: "Kh·ªüi t·∫°o c·∫•u h√¨nh git-generator",
	Long:  `T·∫°o file c·∫•u h√¨nh m·∫∑c ƒë·ªãnh v·ªõi t·∫•t c·∫£ c√°c t√πy ch·ªçn c√≥ s·∫µn.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		ui.ShowInfoMessage("ƒêang kh·ªüi t·∫°o c·∫•u h√¨nh git-generator...")
		manager := config.NewManager()
		err := manager.CreateDefaultConfig()
		if err != nil {
			ui.ShowErrorMessage(fmt.Sprintf("L·ªói t·∫°o c·∫•u h√¨nh: %v", err))
			return err
		}
		ui.ShowSuccessMessage("C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
		return nil
	},
}

var configCmd = &cobra.Command{
	Use:   "config",
	Short: "Manage configuration",
	Long:  `View and manage git-generator configuration settings.`,
}

var configShowCmd = &cobra.Command{
	Use:   "show",
	Short: "Hi·ªÉn th·ªã c·∫•u h√¨nh hi·ªán t·∫°i",
	RunE: func(cmd *cobra.Command, args []string) error {
		if appConfig == nil {
			ui.ShowErrorMessage("C·∫•u h√¨nh ch∆∞a ƒë∆∞·ª£c t·∫£i")
			return fmt.Errorf("configuration not loaded")
		}

		ui.PrintHeader("C·∫•u h√¨nh hi·ªán t·∫°i")
		fmt.Printf("ü§ñ Gemini Model: %s%s%s\n", ui.ColorCyan, appConfig.Gemini.Model, ui.ColorReset)
		fmt.Printf("üå°Ô∏è  Temperature: %s%.2f%s\n", ui.ColorYellow, appConfig.Gemini.Temperature, ui.ColorReset)
		fmt.Printf("üìù Max Tokens: %s%d%s\n", ui.ColorBlue, appConfig.Gemini.MaxTokens, ui.ColorReset)
		fmt.Printf("üé® Output Style: %s%s%s\n", ui.ColorGreen, appConfig.Output.Style, ui.ColorReset)
		fmt.Printf("üìä Max Diff Size: %s%d%s\n", ui.ColorPurple, appConfig.Git.MaxDiffSize, ui.ColorReset)

		if appConfig.Gemini.APIKey != "" {
			fmt.Printf("üîë API Key: %s%s...%s%s\n", ui.ColorGreen,
				appConfig.Gemini.APIKey[:8],
				appConfig.Gemini.APIKey[len(appConfig.Gemini.APIKey)-4:], ui.ColorReset)
		} else {
			fmt.Printf("üîë API Key: %sCh∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p%s\n", ui.ColorRed, ui.ColorReset)
		}

		configPath, _ := cfgManager.GetConfigPath()
		fmt.Printf("üìÅ Config File: %s%s%s\n", ui.ColorBlue, configPath, ui.ColorReset)

		return nil
	},
}

var configSetCmd = &cobra.Command{
	Use:   "set-api-key [key]",
	Short: "Thi·∫øt l·∫≠p Gemini API key",
	Args:  cobra.ExactArgs(1),
	RunE: func(cmd *cobra.Command, args []string) error {
		if cfgManager == nil {
			cfgManager = config.NewManager()
		}

		ui.ShowInfoMessage("ƒêang c·∫≠p nh·∫≠t API key...")
		if err := cfgManager.UpdateAPIKey(args[0]); err != nil {
			ui.ShowErrorMessage(fmt.Sprintf("L·ªói c·∫≠p nh·∫≠t API key: %v", err))
			return fmt.Errorf("failed to update API key: %w", err)
		}

		ui.ShowSuccessMessage("API key ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")
		return nil
	},
}

func init() {
	configCmd.AddCommand(configShowCmd)
	configCmd.AddCommand(configSetCmd)
}

var statusCmd = &cobra.Command{
	Use:   "status",
	Short: "Hi·ªÉn th·ªã tr·∫°ng th√°i repository v√† t√≥m t·∫Øt thay ƒë·ªïi",
	RunE: func(cmd *cobra.Command, args []string) error {
		gitService := git.NewService(".")

		if !gitService.IsGitRepository() {
			ui.ShowErrorMessage("Kh√¥ng ph·∫£i trong Git repository")
			return fmt.Errorf("not in a Git repository")
		}

		ui.PrintHeader("Tr·∫°ng th√°i Repository")

		// Check for staged changes
		hasStaged, err := gitService.HasStagedChanges()
		if err != nil {
			ui.ShowErrorMessage(fmt.Sprintf("L·ªói ki·ªÉm tra staged changes: %v", err))
			return fmt.Errorf("failed to check staged changes: %w", err)
		}

		if hasStaged {
			ui.ShowSuccessMessage("C√≥ staged changes")
		} else {
			ui.ShowWarningMessage("Kh√¥ng c√≥ staged changes")
		}

		if hasStaged {
			diffProcessor := diff.NewProcessor(appConfig.Git.MaxDiffSize, 20)
			genService := generator.NewService(gitService, diffProcessor, nil, *appConfig)

			summary, err := genService.GetChangeSummary(true)
			if err != nil {
				ui.ShowErrorMessage(fmt.Sprintf("L·ªói l·∫•y t√≥m t·∫Øt thay ƒë·ªïi: %v", err))
				return fmt.Errorf("failed to get change summary: %w", err)
			}

			ui.PrintSubHeader("T√≥m t·∫Øt thay ƒë·ªïi")
			fmt.Printf("%s\n", summary.Summary)

			if len(summary.Languages) > 0 {
				ui.PrintSubHeader("Ng√¥n ng·ªØ l·∫≠p tr√¨nh")
				for lang, count := range summary.Languages {
					fmt.Printf("  %s‚Ä¢ %s%s: %s%d files%s\n", ui.ColorBlue, ui.ColorCyan, lang, ui.ColorYellow, count, ui.ColorReset)
				}
			}
		}

		// Get file stats
		stats, err := gitService.GetFileStats()
		if err == nil && len(stats) > 0 {
			ui.PrintSubHeader("Ng√¥n ng·ªØ trong Repository")
			for lang, count := range stats {
				if lang != "Unknown" {
					fmt.Printf("  %s‚Ä¢ %s%s: %s%d files%s\n", ui.ColorGreen, ui.ColorCyan, lang, ui.ColorYellow, count, ui.ColorReset)
				}
			}
		}

		return nil
	},
}

var modeCmd = &cobra.Command{
	Use:   "mode",
	Short: "Qu·∫£n l√Ω ch·∫ø ƒë·ªô giao di·ªán",
	Long:  `Chuy·ªÉn ƒë·ªïi v√† qu·∫£n l√Ω ch·∫ø ƒë·ªô giao di·ªán gi·ªØa CLI v√† Interactive mode.`,
}

var modeListCmd = &cobra.Command{
	Use:   "list",
	Short: "Hi·ªÉn th·ªã c√°c ch·∫ø ƒë·ªô giao di·ªán c√≥ s·∫µn",
	RunE: func(cmd *cobra.Command, args []string) error {
		modes := []interfaces.InterfaceMode{interfaces.ModeCLI, interfaces.ModeInteractive, interfaces.ModeAuto}
		ui.PrintHeader("C√°c ch·∫ø ƒë·ªô giao di·ªán c√≥ s·∫µn")
		for _, mode := range modes {
			switch mode {
			case interfaces.ModeCLI:
				fmt.Printf("  %s‚Ä¢ %sCLI%s - Command Line Interface (d√≤ng l·ªánh)\n", ui.ColorBlue, ui.ColorCyan, ui.ColorReset)
			case interfaces.ModeInteractive:
				fmt.Printf("  %s‚Ä¢ %sInteractive%s - Interactive Terminal UI (t∆∞∆°ng t√°c)\n", ui.ColorGreen, ui.ColorCyan, ui.ColorReset)
			case interfaces.ModeAuto:
				fmt.Printf("  %s‚Ä¢ %sAuto%s - T·ª± ƒë·ªông ph√°t hi·ªán ch·∫ø ƒë·ªô ph√π h·ª£p\n", ui.ColorYellow, ui.ColorCyan, ui.ColorReset)
			}
		}
		return nil
	},
}

func init() {
	modeCmd.AddCommand(modeListCmd)
}

var tagCmd = &cobra.Command{
	Use:   "tag",
	Short: "T·∫°o semantic version tag t·ª± ƒë·ªông",
	Long: `Ph√¢n t√≠ch thay ƒë·ªïi v√† t·∫°o semantic version tag t·ª± ƒë·ªông d·ª±a tr√™n:
- Conventional commits
- Ph√¢n t√≠ch diff v·ªõi AI
- L·ªãch s·ª≠ commit g·∫ßn ƒë√¢y
- Quy t·∫Øc semantic versioning (semver)`,
	Aliases: []string{"version", "v"},
	RunE: func(cmd *cobra.Command, args []string) error {
		// Get flags
		dryRun, _ := cmd.Flags().GetBool("dry-run")
		forceBump, _ := cmd.Flags().GetString("type")
		preRelease, _ := cmd.Flags().GetString("pre-release")
		message, _ := cmd.Flags().GetString("message")
		push, _ := cmd.Flags().GetBool("push")
		annotated, _ := cmd.Flags().GetBool("annotated")

		// Initialize services
		gitService := git.NewService(".")
		diffProcessor := diff.NewProcessor(appConfig.Git.MaxDiffSize, 20)

		// Initialize AI client if API key is available
		var aiClient *ai.GeminiClient
		if appConfig.Gemini.APIKey != "" {
			var err error
			aiClient, err = ai.NewGeminiClient(appConfig.Gemini)
			if err != nil {
				ui.ShowErrorMessage(fmt.Sprintf("L·ªói kh·ªüi t·∫°o AI client: %v", err))
				return fmt.Errorf("failed to initialize AI client: %w", err)
			}
		} else {
			ui.ShowErrorMessage("C·∫ßn c·∫•u h√¨nh Google Gemini API key ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y")
			ui.ShowInfoMessage("Ch·∫°y 'git-generator init' ƒë·ªÉ c·∫•u h√¨nh API key")
			return fmt.Errorf("gemini API key is required for version analysis")
		}

		// Initialize version service
		versionService := versioning.NewService(gitService, diffProcessor, aiClient, *appConfig)

		// Show banner
		ui.ShowBanner()
		ui.PrintHeader("üè∑Ô∏è  Semantic Version Tagging")

		// Validate repository state
		if err := versionService.ValidateRepositoryState(); err != nil {
			ui.ShowErrorMessage(fmt.Sprintf("L·ªói tr·∫°ng th√°i repository: %v", err))
			return err
		}

		ui.ShowSuccessMessage("‚úÖ Repository s·∫°ch, s·∫µn s√†ng t·∫°o tag")

		// Get current version
		currentVersion, err := versionService.GetLatestVersion()
		if err != nil {
			ui.ShowErrorMessage(fmt.Sprintf("L·ªói l·∫•y version hi·ªán t·∫°i: %v", err))
			return err
		}

		ui.ShowInfoMessage(fmt.Sprintf("üìä Version hi·ªán t·∫°i: %s", currentVersion.TagName()))

		// Analyze changes for versioning
		ui.ShowInfoMessage("ü§ñ ƒêang ph√¢n t√≠ch thay ƒë·ªïi ƒë·ªÉ x√°c ƒë·ªãnh version bump...")

		ctx := context.Background()
		analysis, err := versionService.AnalyzeChangesForVersioning(ctx, true)
		if err != nil {
			ui.ShowErrorMessage(fmt.Sprintf("L·ªói ph√¢n t√≠ch thay ƒë·ªïi: %v", err))
			return err
		}

		// Display analysis results
		ui.PrintSubHeader("K·∫øt qu·∫£ ph√¢n t√≠ch AI")
		fmt.Printf("  %s‚Ä¢ ƒê·ªÅ xu·∫•t: %s%s%s version bump\n",
			ui.ColorBlue, ui.ColorCyan, strings.ToUpper(string(analysis.RecommendedBump)), ui.ColorReset)
		fmt.Printf("  %s‚Ä¢ ƒê·ªô tin c·∫≠y: %s%.1f%%%s\n",
			ui.ColorBlue, ui.ColorYellow, analysis.Confidence*100, ui.ColorReset)

		if analysis.Reasoning != "" {
			fmt.Printf("  %s‚Ä¢ L√Ω do: %s%s%s\n",
				ui.ColorBlue, ui.ColorWhite, analysis.Reasoning, ui.ColorReset)
		}

		// Show change details
		if len(analysis.BreakingChanges) > 0 {
			fmt.Printf("  %s‚Ä¢ Breaking changes: %s%d%s\n",
				ui.ColorRed, ui.ColorYellow, len(analysis.BreakingChanges), ui.ColorReset)
		}
		if len(analysis.NewFeatures) > 0 {
			fmt.Printf("  %s‚Ä¢ Features m·ªõi: %s%d%s\n",
				ui.ColorGreen, ui.ColorYellow, len(analysis.NewFeatures), ui.ColorReset)
		}
		if len(analysis.BugFixes) > 0 {
			fmt.Printf("  %s‚Ä¢ Bug fixes: %s%d%s\n",
				ui.ColorBlue, ui.ColorYellow, len(analysis.BugFixes), ui.ColorReset)
		}

		// Create tagging options
		options := types.TaggingOptions{
			DryRun:    dryRun,
			Message:   message,
			Push:      push,
			Annotated: annotated,
		}

		// Handle force bump type
		if forceBump != "" {
			switch strings.ToLower(forceBump) {
			case "major":
				options.ForceBump = types.VersionBumpMajor
			case "minor":
				options.ForceBump = types.VersionBumpMinor
			case "patch":
				options.ForceBump = types.VersionBumpPatch
			default:
				ui.ShowErrorMessage(fmt.Sprintf("Lo·∫°i bump kh√¥ng h·ª£p l·ªá: %s (ch·ªâ ch·∫•p nh·∫≠n: major, minor, patch)", forceBump))
				return fmt.Errorf("invalid bump type: %s", forceBump)
			}
		}

		// Handle pre-release
		if preRelease != "" {
			switch strings.ToLower(preRelease) {
			case "alpha":
				options.PreRelease = types.PreReleaseAlpha
			case "beta":
				options.PreRelease = types.PreReleaseBeta
			case "rc":
				options.PreRelease = types.PreReleaseRC
			default:
				ui.ShowErrorMessage(fmt.Sprintf("Lo·∫°i pre-release kh√¥ng h·ª£p l·ªá: %s (ch·ªâ ch·∫•p nh·∫≠n: alpha, beta, rc)", preRelease))
				return fmt.Errorf("invalid pre-release type: %s", preRelease)
			}
		}

		// Calculate next version
		nextVersion := versionService.CalculateNextVersion(currentVersion, analysis, options)

		ui.PrintSubHeader("Version m·ªõi")
		fmt.Printf("  %s%s ‚Üí %s%s\n",
			ui.ColorYellow, currentVersion.TagName(), nextVersion.TagName(), ui.ColorReset)

		if dryRun {
			ui.ShowInfoMessage("üîç Ch·∫ø ƒë·ªô dry-run: Kh√¥ng t·∫°o tag th·ª±c t·∫ø")
			return nil
		}

		// Create the tag
		ui.ShowInfoMessage(fmt.Sprintf("üè∑Ô∏è  ƒêang t·∫°o tag %s...", nextVersion.TagName()))

		if err := versionService.CreateTag(ctx, nextVersion, options); err != nil {
			ui.ShowErrorMessage(fmt.Sprintf("L·ªói t·∫°o tag: %v", err))
			return err
		}

		ui.ShowSuccessMessage(fmt.Sprintf("‚úÖ ƒê√£ t·∫°o tag %s th√†nh c√¥ng!", nextVersion.TagName()))

		if options.Push {
			ui.ShowInfoMessage("üì§ ƒêang push tag l√™n remote...")
			// TODO: Implement push functionality
		}

		return nil
	},
}

func init() {
	tagCmd.Flags().Bool("dry-run", false, "Xem tr∆∞·ªõc version m√† kh√¥ng t·∫°o tag th·ª±c t·∫ø")
	tagCmd.Flags().String("type", "", "√âp ki·ªÉu version bump (major|minor|patch)")
	tagCmd.Flags().String("pre-release", "", "T·∫°o pre-release version (alpha|beta|rc)")
	tagCmd.Flags().String("message", "", "Custom tag annotation message")
	tagCmd.Flags().Bool("push", false, "Push tag l√™n remote sau khi t·∫°o")
	tagCmd.Flags().Bool("annotated", true, "T·∫°o annotated tag (m·∫∑c ƒë·ªãnh: true)")
}
